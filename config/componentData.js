module.exports = [{"name":"HelloWorld","description":"","props":{"message":{"type":{"name":"string"},"required":false,"description":"Message to display","defaultValue":{"value":"'World'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types'; // ES6\n\nfunction HelloWorld({message}) {\n    return <div> Hello {message}!</div>\n}\n\nHelloWorld.propTypes = {\n    /** Message to display */\n    message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: 'World'\n};\n\nexport default HelloWorld;","examples":[{"name":"ExampleHelloWorld","description":"Custom message describing component","code":"import React from 'react';\nimport HelloWorld from 'prosdevlab-react/HelloWorld';\n\n/** Custom message describing component */\nexport default function ExampleHellowWorld() {\n    return <HelloWorld message=\"World\"/>\n}"}]},{"name":"IconEye","description":"","props":{"size":{"type":{"name":"string"},"required":false,"description":"Can specify \"sm\", \"md\", \"lg\", \"xl\". If not specificied, will default to \"sm\" (base 16px).","defaultValue":{"value":"\"sm\"","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction IconEye({size}) {\n    let width, height;\n\n    if (size === \"sm\") {\n        width = \"16\";\n        height = \"16\";\n    } else if (size === \"md\") {\n        width = \"32\";\n        height = \"32\";\n    } else if (size === \"lg\") {\n        width = \"48\";\n        height = \"48\";\n    } else if (size === \"xl\") {\n        width = \"64\";\n        height = \"64\";\n    }\n\n    return (\n        <svg width={width} height={height} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n            <path d=\"M8 3C4.511 3 1.486 5.032 0 8c1.486 2.968 4.511 5 8 5s6.514-2.032 8-5c-1.486-2.968-4.511-5-8-5zm3.945 2.652c.94.6 1.737 1.403 2.335 2.348a7.594 7.594 0 0 1-2.335 2.348 7.326 7.326 0 0 1-7.889 0A7.615 7.615 0 0 1 1.721 8a7.594 7.594 0 0 1 2.52-2.462 4 4 0 1 0 7.518 0c.062.037.124.075.185.114zM8 6.5a1.5 1.5 0 1 1-3.001-.001A1.5 1.5 0 0 1 8 6.5z\"/>\n        </svg>\n    )\n}\n\nIconEye.propTypes = {\n    /** Can specify \"sm\", \"md\", \"lg\", \"xl\". If not specificied, will default to \"sm\" (base 16px). */\n    size: PropTypes.string\n};\n\nIconEye.defaultProps = {\n    size: \"sm\"\n};\n\nexport default IconEye;","examples":[{"name":"ExampleIconEyeLarge","description":"","code":"import React from 'react';\nimport IconEye from 'prosdevlab-react/IconEye';\n\nexport default function ExampleIconEyeSmall() {\n    return <IconEye size=\"lg\"/>\n}"},{"name":"ExampleIconEyeMedium","description":"","code":"import React from 'react';\nimport IconEye from 'prosdevlab-react/IconEye';\n\nexport default function ExampleIconEyeSmall() {\n    return <IconEye size=\"md\"/>\n}"},{"name":"ExampleIconEyeSmall","description":"","code":"import React from 'react';\nimport IconEye from 'prosdevlab-react/IconEye';\n\nexport default function ExampleIconEyeSmall() {\n    return <IconEye size=\"sm\"/>\n}"}]},{"name":"IconGithub","description":"SVG Github Icon","props":{"size":{"type":{"name":"string"},"required":false,"description":"Can specify \"sm\", \"md\", \"lg\", \"xl\". If not specificied, will default to \"sm\" (base 16px).","defaultValue":{"value":"\"sm\"","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** SVG Github Icon */\nfunction IconGithub({size}) {\n    let width, height;\n\n    if (size === \"sm\") {\n        width = \"16\";\n        height = \"16\";\n    } else if (size === \"md\") {\n        width = \"32\";\n        height = \"32\";\n    } else if (size === \"lg\") {\n        width = \"48\";\n        height = \"48\";\n    } else if (size === \"xl\") {\n        width = \"64\";\n        height = \"64\";\n    }\n\n    return (\n        <svg width={width} height={height} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n            <path d=\"M8 .198a8 8 0 0 0-2.529 15.591c.4.074.547-.174.547-.385 0-.191-.008-.821-.011-1.489-2.226.484-2.695-.944-2.695-.944-.364-.925-.888-1.171-.888-1.171-.726-.497.055-.486.055-.486.803.056 1.226.824 1.226.824.714 1.223 1.872.869 2.328.665.072-.517.279-.87.508-1.07-1.777-.202-3.645-.888-3.645-3.954 0-.873.313-1.587.824-2.147-.083-.202-.357-1.015.077-2.117 0 0 .672-.215 2.201.82A7.672 7.672 0 0 1 8 4.066c.68.003 1.365.092 2.004.269 1.527-1.035 2.198-.82 2.198-.82.435 1.102.162 1.916.079 2.117.513.56.823 1.274.823 2.147 0 3.073-1.872 3.749-3.653 3.947.287.248.543.735.543 1.481 0 1.07-.009 1.932-.009 2.195 0 .213.144.462.55.384A8 8 0 0 0 8.001.196z\"/>\n        </svg>\n    );\n}\n\nIconGithub.propTypes = {\n  /** Can specify \"sm\", \"md\", \"lg\", \"xl\". If not specificied, will default to \"sm\" (base 16px). */\n  size: PropTypes.string\n};\n\nIconGithub.defaultProps = {\n    size: \"sm\"\n};\n\nexport default IconGithub;","examples":[{"name":"ExampleIconGithubLarge","description":"","code":"import React from 'react';\nimport IconGithub from 'prosdevlab-react/IconGithub';\n\nexport default function ExampleIconGithubLarge() {\n    return <IconGithub size=\"lg\"/>\n}"},{"name":"ExampleIconGithubMedium","description":"","code":"import React from 'react';\nimport IconGithub from 'prosdevlab-react/IconGithub';\n\nexport default function ExampleIconGithubMedium() {\n    return <IconGithub size=\"md\"/>\n}\n"},{"name":"ExampleIconGithubSmall","description":"","code":"import React from 'react';\nimport IconGithub from 'prosdevlab-react/IconGithub';\n\nexport default function ExampleIconGithubSmall() {\n    return <IconGithub size=\"sm\"/>\n}\n"}]},{"name":"Label","description":"Label with required field display, htmlFor, and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label"},"required":{"type":{"name":"bool"},"required":false,"description":"If required, display an asterisk after label"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n    return (\n        <label style={{display: 'block'}} htmlFor={htmlFor}>\n            {label} { required && <span style={{color: 'red'}}> *</span> }\n        </label>\n    );\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n\n    /** Label */\n    label: PropTypes.string.isRequired,\n\n    /** If required, display an asterisk after label */\n    required: PropTypes.bool\n};\n\nexport default Label;","examples":[{"name":"ExampleOptionalLabel","description":"Optional Label","code":"import React from 'react';\nimport Label from 'prosdevlab-react/Label';\n\n/** Optional Label */\nexport default function ExampleOptionalLabel() {\n    return <Label htmlFor=\"test\" label=\"test\"/>\n}"},{"name":"ExampleRequiredLabel","description":"Optional Label","code":"import React from 'react';\nimport Label from 'prosdevlab-react/Label';\n\n/** Optional Label */\nexport default function ExampleRequiredLabel() {\n    return <Label htmlFor=\"test\" label=\"test\" required />\n}"}]},{"name":"PasswordInput","description":"Password input with label, quality bar, and show toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID."},"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport IconEye from '../IconEye';\nimport TextInput from '../TextInput';\n\n/** Password input with label, quality bar, and show toggle. */\nclass PasswordInput extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showPassword: false\n        }\n    }\n\n    toggleShowPassword = (event) => {\n        this.setState( prevState => {\n            return { showPassword : !prevState.showPassword }\n        });\n\n        if (event) event.preventDefault();\n    }\n\n    render() {\n        const {htmlId, name, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props} = this.props;\n        const { showPassword } = this.state;\n\n        return (\n            <TextInput\n                htmlId={htmlId}\n                name={name}\n                type={ showPassword ? 'text': 'password' }\n                label={label}\n                onChange={onChange}\n                placeholder={placeholder}\n                value={value}\n                maxLength={maxLength}\n                error={error}\n                required\n                {...props}>\n                {\n                    showVisibilityToggle &&\n                    <a\n                        href=\"#\"\n                        onClick={this.toggleShowPassword}\n                        style={{ marginLeft: 5 }}>\n                        <IconEye />\n                    </a>\n                }\n                {\n                    value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n                }\n            </TextInput>\n        )\n    }\n}\n\nPasswordInput.propTypes = {\n    /** Unique HTML ID. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. */\n    name: PropTypes.string.isRequired,\n\n    /** Password value */\n    value: PropTypes.any,\n\n    /** Input label */\n    label: PropTypes.string,\n\n    /** Function called when password input value changes */\n    onChange: PropTypes.func.isRequired,\n\n    /** Max password length accepted */\n    maxLength: PropTypes.number,\n\n    /** Placeholder displayed when no password is entered */\n    placeholder: PropTypes.string,\n\n    /** Set to true to show the toggle for displaying the currently entered password */\n    showVisibilityToggle: PropTypes.bool,\n\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n    quality: PropTypes.number,\n\n    /** Validation error to display */\n    error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n    maxLength: 50,\n    showVisibilityToggle: false,\n    label: 'Password'\n};\nexport default PasswordInput;","examples":[{"name":"PasswordInputAll","description":"","code":"import React from 'react';\nimport PasswordInput from 'prosdevlab-react/PasswordInput';\n\nclass PasswordInputAll extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            password: ''\n        };\n    }\n\n    getQuality() {\n        const length = this.state.password.length;\n        return length > 10 ? 100 : length * 10;\n    }\n\n    render() {\n        return (\n            <div>\n                <PasswordInput\n                    htmlId=\"password-input-example-all-features\"\n                    name=\"password\"\n                    onChange={ event => this.setState({ password: event.target.value })}\n                    value={this.state.password}\n                    minLength={8}\n                    placeholder=\"Enter password\"\n                    showVisibilityToggle\n                    quality={this.getQuality()}\n                    {...this.props} />\n            </div>\n        )\n    }\n}\n\nexport default PasswordInputAll;"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Width of progress bar"},"height":{"type":{"name":"number"},"required":false,"description":"Height of progress bar","defaultValue":{"value":"5","computed":false}}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends Component {\n\n    getColor = () => {\n        if (this.props.percent === 100) return 'green';\n        return this.props.percent > 50 ? 'lightgreen' : 'red';\n    };\n\n    getWidthAsPercentOfTotalWidth = () => {\n        return parseInt(this.props.width * (this.props.percent / 100), 10);\n    };\n\n    render() {\n        const { percent, width, height } = this.props;\n        return (\n            <div style={{border: 'solid 1px lightgray', width: width}}>\n                <div style={{\n                    width: this.getWidthAsPercentOfTotalWidth(),\n                    height,\n                    backgroundColor: this.getColor(percent)\n                }} />\n            </div>\n        )\n    }\n}\nProgressBar.propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n\n    /** Width of progress bar */\n    width: PropTypes.number.isRequired,\n\n    /** Height of progress bar */\n    height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n    height: 5\n};\n\nexport default ProgressBar;","examples":[{"name":"Example1_100","description":"100% progress","code":"import React from 'react';\nimport ProgressBar from 'prosdevlab-react/ProgressBar';\n\n/** 100% progress */\nexport default function Example1_100() {\n    return <ProgressBar percent={100} width={200}/>\n}\n"},{"name":"Example2_70","description":"70% progress","code":"import React from 'react';\nimport ProgressBar from 'prosdevlab-react/ProgressBar';\n\n/** 70% progress */\nexport default function Example2_70() {\n    return <ProgressBar percent={70} width={200}/>\n}\n"},{"name":"Example3_20","description":"20% progress","code":"import React from 'react';\nimport ProgressBar from 'prosdevlab-react/ProgressBar';\n\n/** 20% progress */\nexport default function Example3_20() {\n    return <ProgressBar percent={20} width={200}/>\n}\n"}]},{"name":"TextInput","description":"Text input with label","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID."},"name":{"type":{"name":"string"},"required":true,"description":"Input name."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with label */\nfunction TextInput({htmlId, label, required = false, type = \"text\", name, placeholder, value, onChange, error, children, ...props}) {\n    return (\n        <div style={{marginBottom: 16}}>\n        <Label htmlFor={htmlId} label={label} />\n        <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                style={error && {border: 'solid 1px red'}}\n                {...props}\n         />{children}\n         {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n        </div>\n    )\n}\n\nTextInput.propTypes = {\n    /** Unique HTML ID. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;","examples":[{"name":"ExampleTextInput","description":"","code":"import React from 'react';\nimport TextInput from 'prosdevlab-react/TextInput';\n\nexport default function ExampleTextInput() {\n    return (\n        <TextInput\n            htmlId=\"exampleId\"\n            name=\"firstName\"\n            label=\"First Name\"\n            onChange={()=>{}}\n        />\n    )\n\n}"},{"name":"ExampleTextInputError","description":"","code":"import React from 'react';\nimport TextInput from 'prosdevlab-react/TextInput';\n\nexport default function ExampleTextInputError() {\n    return (\n        <TextInput\n            htmlId=\"exampleId\"\n            name=\"firstName\"\n            label=\"First Name\"\n            onChange={()=>{}}\n            required\n            error=\"First name is required.\"\n        />\n    )\n\n}"}]}]